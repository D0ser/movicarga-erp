---
description: 
globs: src/lib/supabase*.ts,src/lib/supabaseServices.ts,*supabase*.ts,supabase/**/*,src/lib/supabase.ts,src/lib/supabaseClient.ts,src/lib/supabase-client.ts
alwaysApply: false
---
# Integración con Supabase

Este proyecto utiliza Supabase como backend principal para base de datos, autenticación y almacenamiento.

## Archivos clave

- [src/lib/supabase.ts](mdc:src/lib/supabase.ts): Configuración principal del cliente Supabase
- [src/lib/supabaseClient.ts](mdc:src/lib/supabaseClient.ts): Cliente Supabase para el navegador y abstracciones
- [src/lib/supabase-node.ts](mdc:src/lib/supabase-node.ts): Cliente Supabase para uso en el servidor
- [src/lib/supabaseServices.ts](mdc:src/lib/supabaseServices.ts): Servicios y funciones para interactuar con Supabase
- [src/lib/db-example.ts](mdc:src/lib/db-example.ts): Ejemplos de uso de la abstracción de la base de datos

## Uso de Supabase

### Consultas a la base de datos

#### Forma recomendada (utilizando la abstracción)

La forma preferida para realizar operaciones con Supabase es utilizar la abstracción proporcionada en `supabaseClient.ts`:

```typescript
import { db } from '@/lib/supabaseClient';
import { Cliente } from '@/lib/supabaseServices';

// Obtener todos los clientes
const clientes = await db.getAll<Cliente>('clientes', 'razon_social');

// Obtener cliente por ID
const cliente = await db.getById<Cliente>('clientes', id);

// Crear un cliente
const nuevoCliente = await db.create<Cliente>('clientes', clienteData);

// Actualizar un cliente
const clienteActualizado = await db.update<Cliente>('clientes', id, cambios);

// Eliminar un cliente
await db.delete('clientes', id);

// Para consultas más complejas, usar el método 'from'
const { data, error } = await db.from('clientes')
  .select('*')
  .eq('estado', true)
  .order('razon_social');
```

#### Forma tradicional (usando servicios)

Para entidades comunes, se pueden utilizar los servicios predefinidos en `supabaseServices.ts`:

```typescript
import { clienteService } from '@/lib/supabaseServices';

// En un componente...
const clientes = await clienteService.getClientes();
const cliente = await clienteService.getClienteById(id);
```

#### Forma directa (menos recomendada)

En casos donde se necesite acceso directo al cliente de Supabase:

```typescript
import supabase from '@/lib/supabase';

// Login
const { data, error } = await supabase.auth.signInWithPassword({
  email: 'usuario@ejemplo.com',
  password: 'contraseña'
});

// Logout
await supabase.auth.signOut();
```

## Scripts de utilidad

- `npm run test-connection`: Verifica la conexión a Supabase
- `npm run verify-supabase`: Verifica la configuración de Supabase
- `npm run test-database`: Prueba las funciones de base de datos


