name: Update Supabase Database

on:
  push:
    branches:
      - main # O reemplaza con tu rama principal: master, development, etc.
    paths:
      - "create-all-tables.sql" # Solo se ejecuta cuando este archivo cambia

jobs:
  update-database:
    runs-on: ubuntu-latest

    env:
      SUPABASE_DB_HOST: ${{ secrets.SUPABASE_DB_HOST }}
      SUPABASE_DB_USER: ${{ secrets.SUPABASE_DB_USER }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_DB_PORT: ${{ secrets.SUPABASE_DB_PORT || '5432' }}
      SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME || 'postgres' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install pg

      - name: Execute SQL script using direct connection
        run: |
          cat << 'EOF' > update-database.js
          const fs = require('fs');
          const { Client } = require('pg');

          async function main() {
            let client;
            try {
              console.log('üìù Leyendo el archivo SQL...');
              const sqlScript = fs.readFileSync('create-all-tables.sql', 'utf8');
              
              // Usar variables de entorno para las credenciales
              console.log('üîå Conectando a Supabase...');
              
              client = new Client({
                user: process.env.SUPABASE_DB_USER,
                password: process.env.SUPABASE_DB_PASSWORD,
                host: process.env.SUPABASE_DB_HOST,
                port: process.env.SUPABASE_DB_PORT,
                database: process.env.SUPABASE_DB_NAME,
                ssl: {
                  rejectUnauthorized: false
                }
              });
              
              await client.connect();
              console.log('‚úÖ Conexi√≥n establecida exitosamente');
              
              console.log('üöÄ Ejecutando el script SQL...');
              
              // Dividir el script en declaraciones individuales
              const statements = sqlScript.split(';').filter(stmt => stmt.trim().length > 0);
              
              console.log(`Encontradas ${statements.length} declaraciones SQL para ejecutar`);
              
              // Iniciar una transacci√≥n
              await client.query('BEGIN');
              
              // Ejecutar cada declaraci√≥n individualmente
              let errors = 0;
              for (let i = 0; i < statements.length; i++) {
                const statement = statements[i].trim() + ';';
                try {
                  await client.query(statement);
                  if (i % 10 === 0 || i === statements.length - 1) {
                    console.log(`Progreso: ${i + 1}/${statements.length} declaraciones ejecutadas`);
                  }
                } catch (err) {
                  errors++;
                  console.error(`Error en la declaraci√≥n #${i + 1}: ${err.message}`);
                  console.error(`SQL: ${statement.substring(0, 150)}...`);
                  
                  // Si es un error grave, detener la ejecuci√≥n
                  if (errors > 5) {
                    console.error('Demasiados errores, abortando la operaci√≥n.');
                    await client.query('ROLLBACK');
                    process.exit(1);
                  }
                }
              }
              
              if (errors > 0) {
                console.warn(`‚ö†Ô∏è Se encontraron ${errors} errores durante la ejecuci√≥n.`);
                console.warn('Realizando rollback para mantener la consistencia de la base de datos.');
                await client.query('ROLLBACK');
                process.exit(1);
              } else {
                console.log('‚úÖ Script SQL ejecutado correctamente, confirmando cambios.');
                await client.query('COMMIT');
              }
              
            } catch (error) {
              console.error('‚ùå Error al actualizar la base de datos:', error.message);
              if (error.stack) {
                console.error('Detalles del error:', error.stack);
              }
              
              // Asegurarse de hacer rollback si hay error
              if (client) {
                try {
                  await client.query('ROLLBACK');
                  console.log('Se ha realizado rollback de los cambios debido al error.');
                } catch (rollbackError) {
                  console.error('Error adicional durante el rollback:', rollbackError.message);
                }
              }
              
              process.exit(1);
            } finally {
              // Cerrar la conexi√≥n en cualquier caso
              if (client) {
                try {
                  await client.end();
                  console.log('Conexi√≥n cerrada.');
                } catch (closeError) {
                  console.error('Error al cerrar la conexi√≥n:', closeError.message);
                }
              }
            }
          }

          main();
          EOF

          node update-database.js

      - name: Notify success
        if: success()
        run: echo "‚úÖ La base de datos ha sido actualizada exitosamente!"

      - name: Notify failure
        if: failure()
        run: echo "‚ùå Error al actualizar la base de datos. Revisa los logs para m√°s detalles."
