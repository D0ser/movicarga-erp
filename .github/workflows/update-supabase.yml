name: Update Supabase Database

on:
  push:
    branches:
      - main # O reemplaza con tu rama principal: master, development, etc.
    paths:
      - "create-all-tables.sql" # Solo se ejecuta cuando este archivo cambia

jobs:
  update-database:
    runs-on: ubuntu-latest

    env:
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install pg

      - name: Execute SQL script using direct connection
        run: |
          cat << 'EOF' > update-database.js
          const fs = require('fs');
          const { Client } = require('pg');

          async function main() {
            try {
              console.log('üìù Leyendo el archivo SQL...');
              const sqlScript = fs.readFileSync('create-all-tables.sql', 'utf8');
              
              // Usar exactamente las credenciales proporcionadas
              console.log('üîå Conectando a Supabase usando las credenciales proporcionadas...');
              
              const client = new Client({
                user: 'postgres.bccxjjgpabepwbqglmrn',
                password: 'xu5iZMpih4u&35d',
                host: 'aws-0-sa-east-1.pooler.supabase.com',
                port: 5432,
                database: 'postgres',
                ssl: {
                  rejectUnauthorized: false
                }
              });
              
              await client.connect();
              console.log('‚úÖ Conexi√≥n establecida exitosamente');
              
              console.log('üöÄ Ejecutando el script SQL...');
              
              // Dividir el script en declaraciones individuales para evitar problemas con scripts grandes
              const statements = sqlScript.split(';').filter(stmt => stmt.trim().length > 0);
              
              console.log(`Encontradas ${statements.length} declaraciones SQL para ejecutar`);
              
              // Ejecutar cada declaraci√≥n individualmente
              for (let i = 0; i < statements.length; i++) {
                const statement = statements[i].trim() + ';';
                try {
                  await client.query(statement);
                  if (i % 10 === 0 || i === statements.length - 1) {
                    console.log(`Progreso: ${i + 1}/${statements.length} declaraciones ejecutadas`);
                  }
                } catch (err) {
                  console.error(`Error en la declaraci√≥n #${i + 1}: ${err.message}`);
                  // Continuamos con la siguiente declaraci√≥n
                }
              }
              
              console.log('‚úÖ Script SQL ejecutado correctamente');
              await client.end();
              
            } catch (error) {
              console.error('‚ùå Error al actualizar la base de datos:', error.message);
              if (error.stack) {
                console.error('Detalles del error:', error.stack);
              }
              process.exit(1);
            }
          }

          main();
          EOF

          node update-database.js

      - name: Notify success
        if: success()
        run: echo "‚úÖ La base de datos ha sido actualizada exitosamente!"

      - name: Notify failure
        if: failure()
        run: echo "‚ùå Error al actualizar la base de datos. Revisa los logs para m√°s detalles."
